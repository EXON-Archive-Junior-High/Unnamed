import Head from 'next/head'
import { Fragment, useEffect, useRef, useState } from 'react'
import laftel from 'laftel.js'
import axios from 'axios'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faArrowLeft, faArrowRight } from '@fortawesome/free-solid-svg-icons'

import CardImg from '../assets/card.jpg'

import Nav from './nav'
import Loading from './loading'

export default function Home({ daily, images, ids }: any) {

  // let selectedInfo = {
  //   name: '',
  //   img: '',

  // }

  const [isInfoOpen , setIsInfoOpen] = useState(false)
  const [infoPropId, setInfoPropId] = useState('')

  const [week, setWeek] = useState('')
  const [Load, setLoad] = useState(true)
  const horizontalScrollRef = useRef<null | any>(null)

  const handleNextButtonClick = (nextType: 'prev' | 'next') => {
    if (!horizontalScrollRef.current) return;
      if (nextType === 'prev') {
        horizontalScrollRef.current.scrollTo({
          left: horizontalScrollRef.current.scrollLeft - horizontalScrollRef.current.offsetWidth,
          behavior: 'smooth',
        })
      } else {
        horizontalScrollRef.current.scrollTo({
          left: horizontalScrollRef.current.scrollLeft + horizontalScrollRef.current.offsetWidth,
          behavior: 'smooth',
        })
      }
  }

  const getInfo = async () => {
    const res = await fetch('http://localhost:3000/api/info', {
      method: 'POST',
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ name: infoPropId })
    })
    const data = await res.json()
    console.log(data.anime)
  }

  useEffect(() => {
    const day = new Date()
    const WeekDay = ['일', '월', '화', '수', '목', '금', '토']
    setWeek(WeekDay[day.getDay()])

    setTimeout(()=>{
      setLoad(false)
    }, 1000)

  }, [])

  return (
    Load ? <Loading /> :
    <Fragment>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      { isInfoOpen ? 
        <div className="window-contain" onClick={ () => { setIsInfoOpen(false) } }>
          <div className="info-window">
            <div className="">정보 창</div>
            {/* <div className="">id: { props.id }</div> */}
            <div className="">{ infoPropId }</div>
          </div>
        </div>
      : null }

      <Nav />

      <main>
        <nav className='nav'>
          <div className="nav-title">Navbar</div>
          <button className="btn">로그인</button>
        </nav>

        <div className="bg"></div>

        <div className="bg-info">
          <div className="bg-info-text">이번 분기의 <span className='colored'>인기</span> 애니를 확인해보세요</div>
          <button className="btn">확인하러 가기</button>
        </div>

        <div className="cards">

          <div className="tests">
            <div className="card-sub">
              <div className="bg-info-text">오늘(<span className='colored colored-2'>{week}</span>요일) 방영예정 애니</div>
            </div>
            {/* <button className="change-btn">표시 변경</button> */}
          </div>

          <div className="card-contain-contain">
            <button className='prev' onClick={ () => handleNextButtonClick('prev') }>
              <FontAwesomeIcon icon={faArrowLeft} />
            </button>
            <div className="card-contain" ref={horizontalScrollRef}>
                { daily.map((el: any, idx: number) => (
                  <button className="card" onClick={ () => { setInfoPropId(el.title); getInfo(); setIsInfoOpen(true) } }>
                    <img className='card-img' src={ images[idx] || CardImg } />
                    <div className="text-contain">
                      <div className="card-title">{ el.title }</div>
                      <div className="card-week">방영 요일: <strong>{ el.week }요일</strong></div>
                    </div>
                  </button>
                )) }
            </div>
            <button className='next' onClick={ () => handleNextButtonClick('next') }>
            <FontAwesomeIcon icon={faArrowRight} />
            </button>
          </div>
        </div>

      </main>
    </Fragment>
  )
}

export async function getStaticProps() {
  const res = await fetch('http://localhost:3000/api/daily', {
    method: 'GET',
    headers: {
        "Content-Type": "application/json",
    },
  })
  const data = await res.json()

  return { props: { daily: data.data, images: data.images, ids: data.ids } }
}